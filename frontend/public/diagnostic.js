/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API –¥–ª—è Football Stats
 * 
 * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.
 */

console.log('%c üîç Football Stats API Diagnostic Tool üîç', 'background: #122; color: #0ff; font-size: 16px; padding: 5px 10px; border-radius: 5px;');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —á–µ—Ä–µ–∑ Next.js proxy
async function checkProxiedAPI() {
  console.group('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏ (/api/)');
  
  try {
    const response = await fetch('/api/');
    const status = response.status;
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${status}`);
    
    let data;
    try {
      data = await response.json();
      console.log('–û—Ç–≤–µ—Ç:', data);
    } catch (e) {
      const text = await response.text();
      console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', text);
    }
    
    if (response.ok) {
      console.log('%c ‚úì API —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω', 'color: green; font-weight: bold');
    } else {
      console.log('%c ‚úó API —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É', 'color: red; font-weight: bold');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    console.log('%c ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏', 'color: red; font-weight: bold');
  }
  
  console.groupEnd();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API
async function checkDirectAPI() {
  console.group('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API');
  
  try {
    const response = await fetch('http://192.168.1.124:8088');
    const status = response.status;
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${status}`);
    
    let data;
    try {
      data = await response.json();
      console.log('–û—Ç–≤–µ—Ç:', data);
    } catch (e) {
      const text = await response.text();
      console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', text);
    }
    
    if (response.ok) {
      console.log('%c ‚úì –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç', 'color: green; font-weight: bold');
    } else {
      console.log('%c ‚úó –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É', 'color: red; font-weight: bold');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    console.log('%c ‚úó –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'color: red; font-weight: bold');
  }
  
  console.groupEnd();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Axios
function checkAxiosConfig() {
  console.group('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Axios');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const hasAxios = typeof axios !== 'undefined';
    
    if (!hasAxios) {
      console.log('%c ‚úó Axios –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏', 'color: red');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç axios –≤ –ø—Ä–æ–µ–∫—Ç–µ');
    } else {
      console.log('%c ‚úì Axios –¥–æ—Å—Ç—É–ø–µ–Ω', 'color: green');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      console.log('Axios defaults:', {
        baseURL: axios.defaults.baseURL,
        timeout: axios.defaults.timeout,
        headers: axios.defaults.headers
      });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Axios:', e);
  }
  
  console.groupEnd();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /cities/
async function checkCitiesEndpoint() {
  console.group('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /cities/');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  console.log('–ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏:');
  try {
    const response = await fetch('/api/cities/');
    const status = response.status;
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${status}`);
    
    if (response.ok) {
      try {
        const data = await response.json();
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤:', data.length);
        console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', data.slice(0, 2));
        console.log('%c ‚úì API /cities/ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'color: green; font-weight: bold');
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
        const text = await response.text();
        console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', text);
        console.log('%c ‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ', 'color: red; font-weight: bold');
      }
    } else {
      console.log('%c ‚úó API /cities/ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É', 'color: red; font-weight: bold');
      try {
        const errorText = await response.text();
        console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', e);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    console.log('%c ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /cities/ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏', 'color: red; font-weight: bold');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  console.log('\n–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API:');
  try {
    const response = await fetch('http://192.168.1.124:8088/cities/');
    const status = response.status;
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${status}`);
    
    if (response.ok) {
      try {
        const data = await response.json();
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤:', data.length);
        console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', data.slice(0, 2));
        console.log('%c ‚úì –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ /cities/ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'color: green; font-weight: bold');
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
        const text = await response.text();
        console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', text);
        console.log('%c ‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ', 'color: red; font-weight: bold');
      }
    } else {
      console.log('%c ‚úó –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ /cities/ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É', 'color: red; font-weight: bold');
      try {
        const errorText = await response.text();
        console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', e);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    console.log('%c ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /cities/', 'color: red; font-weight: bold');
  }
  
  console.groupEnd();
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
async function applyFixes() {
  console.group('5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Next.js rewrites
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ Next.js rewrite –ø—Ä–∞–≤–∏–ª...');
  const nextConfig = window?.next?.config?.publicRuntimeConfig;
  
  if (nextConfig) {
    console.log('Next.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:', nextConfig);
  } else {
    console.log('Next.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ü–∞—Ç—á —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ Axios
  try {
    if (typeof axios !== 'undefined') {
      console.log('–ü–∞—Ç—á–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Axios...');
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      const originalUse = axios.interceptors.response.use;
      
      // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–∞—à —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 500 –æ—à–∏–±–æ–∫
      axios.interceptors.response.use(
        (response) => response,
        (error) => {
          console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –ø–∞—Ç—á:', error.message);
          
          // –î–ª—è 500 –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
          if (error.response && error.response.status === 500) {
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è 500 –æ—à–∏–±–∫–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞
            const config = error.config;
            
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            if (!config || !config._retry) {
              if (config) {
                config._retry = true;
                console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ 500 –æ—à–∏–±–∫–∏');
                
                // –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                return new Promise((resolve) => {
                  setTimeout(() => resolve(axios(config)), 1000);
                });
              }
            }
          }
          
          return Promise.reject(error);
        }
      );
      
      console.log('%c ‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Axios —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'color: green; font-weight: bold');
    } else {
      console.log('%c ‚úó Axios –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á', 'color: red');
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ç—á–µ Axios:', e);
  }
  
  console.groupEnd();
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runAllTests() {
  console.log('%c –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...', 'background: #122; color: #0ff; padding: 3px 8px;');
  
  await checkProxiedAPI();
  await checkDirectAPI();
  checkAxiosConfig();
  await checkCitiesEndpoint();
  
  console.log('\n%c üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...', 'background: #122; color: #0ff; padding: 3px 8px;');
  await applyFixes();
  
  console.log('\n%c –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úì', 'background: #122; color: #0ff; font-size: 16px; padding: 5px 10px; border-radius: 5px;');
}

// –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.footballStats = {
  checkAPI: checkProxiedAPI,
  checkDirectAPI: checkDirectAPI,
  checkAxios: checkAxiosConfig,
  checkCities: checkCitiesEndpoint,
  applyFixes: applyFixes,
  diagnose: runAllTests
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runAllTests();

console.log('\n%c –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ', 'background: #333; color: #fff; padding: 5px;');
console.log('%c footballStats.checkAPI() %c - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API —á–µ—Ä–µ–∑ Next.js –ø—Ä–æ–∫—Å–∏', 'background: #222; color: #9f9; padding: 3px 6px; border-radius: 3px;', 'color: #888');
console.log('%c footballStats.checkDirectAPI() %c - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API', 'background: #222; color: #9f9; padding: 3px 6px; border-radius: 3px;', 'color: #888');
console.log('%c footballStats.checkCities() %c - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /cities/', 'background: #222; color: #9f9; padding: 3px 6px; border-radius: 3px;', 'color: #888');
console.log('%c footballStats.applyFixes() %c - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'background: #222; color: #9f9; padding: 3px 6px; border-radius: 3px;', 'color: #888');
console.log('%c footballStats.diagnose() %c - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏', 'background: #222; color: #9f9; padding: 3px 6px; border-radius: 3px;', 'color: #888');


